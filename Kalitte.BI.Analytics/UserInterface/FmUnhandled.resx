<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>